{"ast":null,"code":"import _classCallCheck from \"/Users/VickyW/Web-projects/show-local-weather2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/VickyW/Web-projects/show-local-weather2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/VickyW/Web-projects/show-local-weather2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/VickyW/Web-projects/show-local-weather2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/VickyW/Web-projects/show-local-weather2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/VickyW/Web-projects/show-local-weather2/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nvar locationUrl = function locationUrl(city) {\n  return \"https://api.opencagedata.com/geocode/v1/json?key=196b6ac7d96245988d826a6fd49c913d&q=\".concat(city, \"&pretty=1\");\n};\n\nvar weatherUrl = function weatherUrl(lat, lng) {\n  return \"https://api.darksky.net/forecast/82317ee0c43e86070fe114fabe7b32b7/\".concat(lat, \",\").concat(lng, \"?units=ca\");\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      city: 'Vancouver',\n      summary: '',\n      temperature: '',\n      data: null\n    };\n\n    _this.fetchWeather = function (city) {\n      axios.get(locationUrl(city)).then(function (response) {\n        var _response$data$result = response.data.results[0].geometry,\n            lat = _response$data$result.lat,\n            lng = _response$data$result.lng;\n        console.log(response.data.results[0].geometry);\n        return {\n          lat: lat,\n          lng: lng\n        };\n      }).then(function (_ref) {\n        var lat = _ref.lat,\n            lng = _ref.lng;\n        axios.get(weatherUrl(lat, lng)).then(function (response) {\n          var _response$data$curren = response.data.currently,\n              summary = _response$data$curren.summary,\n              temperature = _response$data$curren.temperature;\n          var timezone = response.data.timezone;\n\n          _this.setState({\n            city: timezone,\n            summary: summary,\n            temperature: temperature,\n            data: response.data\n          });\n        });\n      });\n    };\n\n    _this.getWeather = function () {\n      var city = _this.searchCity.city.value;\n      console.log(_this.searchCity.city);\n\n      _this.fetchWeather(city);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchWeather(this.state.city);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        ref: function ref(self) {\n          return _this2.searchCity = self;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.getWeather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Get Weather\")), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"City: \", this.state.city), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"The weather is currently: \", this.state.summary), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"The temperature is currently: \", this.state.temperature, \" C\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/VickyW/Web-projects/show-local-weather2/src/App.js"],"names":["React","Component","axios","locationUrl","city","weatherUrl","lat","lng","App","state","summary","temperature","data","fetchWeather","get","then","response","results","geometry","console","log","currently","timezone","setState","getWeather","searchCity","value","self"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nconst locationUrl = (city) => `https://api.opencagedata.com/geocode/v1/json?key=196b6ac7d96245988d826a6fd49c913d&q=${city}&pretty=1`\n\nconst weatherUrl = (lat, lng) => `https://api.darksky.net/forecast/82317ee0c43e86070fe114fabe7b32b7/${lat},${lng}?units=ca`\n\n\nclass App extends Component {\n  state = {\n    city: 'Vancouver',\n    summary: '',\n    temperature: '',\n    data: null\n  }\n\n  fetchWeather = (city) => {\n    axios.get(locationUrl(city))\n    .then(response => {\n      const { lat, lng } = response.data.results[0].geometry\n      console.log(response.data.results[0].geometry)\n      return { lat, lng }\n    })\n    .then(({ lat, lng}) => {\n        axios.get(weatherUrl(lat, lng))\n          .then(response => {\n            const {summary, temperature} = response.data.currently\n            const { timezone } = response.data\n            this.setState({\n              city: timezone,\n              summary,\n              temperature,\n              data: response.data\n            })\n          })\n    })\n  }\n\n  componentDidMount() {\n    this.fetchWeather(this.state.city)\n  }\n\n  getWeather = () => {\n    const city = this.searchCity.city.value\n    console.log(this.searchCity.city)\n    this.fetchWeather(city)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form ref={self => this.searchCity = self}>\n          <input type=\"text\" name=\"city\"/>\n          <button type=\"button\" onClick={this.getWeather}>Get Weather</button>\n        </form>\n        <h1>City: {this.state.city}</h1>\n        <p>The weather is currently: {this.state.summary}</p>\n        <p>The temperature is currently: {this.state.temperature} C</p>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}